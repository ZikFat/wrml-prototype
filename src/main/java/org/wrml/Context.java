/**
 * Copyright (C) 2011 WRML.org <mark@wrml.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.wrml;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import org.wrml.model.runtime.Prototype;
import org.wrml.model.runtime.PrototypeField;
import org.wrml.model.schema.Schema;
import org.wrml.service.CachingService;
import org.wrml.service.Service;
import org.wrml.service.WebClient;
import org.wrml.service.runtime.PrototypeFieldService;
import org.wrml.service.runtime.PrototypeService;
import org.wrml.service.runtime.SchemaService;
import org.wrml.service.runtime.SystemSchemaService;
import org.wrml.util.DelegatingObservableMap;
import org.wrml.util.ObservableMap;
import org.wrml.util.UriTransformer;

/**
 * 
 * Thread Dimension (Runtime Thread Local)
 * 
 * TODO: Consider making Context have a global static AND a thread local
 * instance, the latter of which takes hierarchically "scoped" precedence
 * over the former.
 * 
 * This will allow for the Context to be read "globally" within a scope that
 * makes logical sense in multithreaded programs, like an web resource
 * server.
 * 
 * That being said, by handing each Model its own Context there is the
 * opportunity to create some very fine-grained scopes using context
 * implementations, meaning that the thread local scope may be different but
 * "parented" by the global context.
 * 
 * Reference Dimension (Design-time Composition)
 * 
 * Parenting means making contexts hierarchical using object references,
 * meaning that a context could have a parent and children. On the server
 * side this might be used relate the thread local context to the parent
 * context, even to the point of the child delegating (cascading) to the
 * parent reference for a default value or behavior that doesn't need to be
 * overridden locally.
 * 
 * This hierarchy can also be a useful abstraction when building
 * applications such as user interfaces, which may have nested contexts for
 * data and associated actions (e.g. plug-ins). In these situations the
 * thread local may not be an effective slot to achieve context locality.
 * 
 * Polymorphism Dimension (Design-time Inheritance)
 * 
 * Context subclasses can alter the default behavior and values by
 * overriding certain methods (and obviously by implementing the absract
 * ones).
 * 
 * TODO: Eventually need to figure out how to make LinkRelation and other
 * core types extend Model. This is the dog food that WRML must eat in
 * order to use itself to make itself (bootstrap).
 * 
 * This will allow WRML to treat these core type instance "loadings" just
 * like any other application using WRML. Meaning that there is an
 * associated service class for each core type. This association can be
 * formed at program start-up (via config/wiring) which results in a
 * registration by schema within the Context. The mapping can be changed as
 * needed at runtime. The type registration can be repeated for the same
 * service and may also include simple URI wildcard patterns to allow for a
 * single service to handle many schema types. For example an API that
 * stores schema instances in a flexible document store (e.g. mongoDB) could
 * handle requests for many different schema types and CRUD them with ease.
 * 
 * For the Java implementation of WRML to leverage itself (bootstrap), for
 * its own core APIs and tools, all core WRML classes must be stripped down
 * to interfaces, with all of their implementation responsibilities shifted
 * to the framework. This is what it will take to be a truly web resource
 * model-oriented, metadata-driven application framework.
 * 
 * For starters we could use Java interface definitions as placeholders for
 * these core types schema's being accessible via the schema REST API. Hand
 * coding the interface with a mindset of auto-generation, meaning simple
 * repeatable patterns for method signatures and that reference types that
 * can themselves be easily generated and fetched. This will allow these
 * interfaces to later be generated by code that is built into the runtime
 * and compile time environments to allow the eventual web based schemas to
 * be coded against directly.
 * 
 * The impl subclasses could be instantiated using a Proxy class that calls
 * the Model's getFieldValue or Link.click. This drives all
 * implementation concerns down into the framework's Model, its Links,
 * and the supporting Context. With the Context providing hooks for
 * application code.
 * 
 * This Proxy approach may prove to be the final solution or we may decide
 * to auto-generate impl classes via our own code generation.
 */
public class Context {

    private final ObservableMap<URI, Service> _ServiceMap;
    private PrototypeService _PrototypeService;
    private CachingService _PrototypeCachingService;

    private SchemaService _SchemaService;
    private CachingService _SchemaCachingService;

    public Context() {
        _ServiceMap = new DelegatingObservableMap<URI, Service>(new HashMap<URI, Service>());
        SchemaService schemaService = new SystemSchemaService(this, new WebClient(this));
        setSchemaService(schemaService);
    }
            
    public Model instantiateDynamicModel(Class<?> schemaClass, URI modelId, Model requestor) {
        final Context context = (requestor != null) ? requestor.getContext() : this;
        final URI schemaId = context.getSchemaId(schemaClass);
        return instantiateDynamicModel(schemaId, modelId, requestor);
    }

    public Model instantiateDynamicModel(URI schemaId, URI modelId, Model requestor) {
        final Context context = (requestor != null) ? requestor.getContext() : this;
        RuntimeModel dynamicModel = new RuntimeModel(schemaId, context, modelId);
        return dynamicModel;
    }

    public Model instantiateStaticModel(Class<?> schemaClass, URI modelId, Model requestor) {
        Model dynamicModel = instantiateDynamicModel(schemaClass, modelId, requestor);
        return instantiateStaticModel(dynamicModel);
    }

    public Model instantiateStaticModel(Model dynamicModel) {
        Model staticModel = StaticModelProxy.newProxyInstance(dynamicModel);
        return staticModel;
    }

    public String getClassName(URI schemaId) {
        UriTransformer schemaIdTransformer = _SchemaService.getIdTransformer();
        return (String) schemaIdTransformer.aToB(schemaId);
    }

    public Prototype getPrototype(URI schemaId) {
        return (Prototype) _PrototypeCachingService.get(schemaId);
    }

    public Schema getSchema(URI schemaId) {
        return (Schema) _SchemaCachingService.get(schemaId);
    }

    public URI getSchemaId(Class<?> clazz) {
        return getSchemaId(clazz.getCanonicalName());
    }

    public URI getSchemaId(String className) {
        UriTransformer schemaIdTransformer = _SchemaService.getIdTransformer();
        return schemaIdTransformer.bToA(className);
    }

    public SchemaService getSchemaService() {
        return _SchemaService;
    }

    public Service getService(Class<?> clazz) {
        URI schemaId = getSchemaId(clazz);
        return getService(schemaId);
    }

    public Service getService(String className) {
        URI schemaId = getSchemaId(className);
        return getService(schemaId);
    }

    public Service getService(URI schemaId) {
        
        /*
         * TODO: Allow for more complex mapping of schemas to services
         * For example, allow for a base schema to be registered for
         * sub-services or a uri pattern match.
         */

        return _ServiceMap.get(schemaId);
    }

    public void setSchemaService(SchemaService schemaService) {

        _SchemaService = schemaService;
        _PrototypeService = new PrototypeService(this);
        final Service prototypeFieldService = new PrototypeFieldService(this);

        _SchemaCachingService = instantiateCachingService(schemaService);
        _PrototypeCachingService = instantiateCachingService(_PrototypeService);
        final CachingService prototypeFieldCachingService = instantiateCachingService(prototypeFieldService);

        URI schemaSchemaId = getSchemaId(Schema.class);
        URI prototypeSchemaId = getSchemaId(Prototype.class);
        URI prototypeFieldSchemaId = getSchemaId(PrototypeField.class);

        _ServiceMap.put(schemaSchemaId, _SchemaCachingService);
        _ServiceMap.put(prototypeSchemaId, _PrototypeCachingService);
        _ServiceMap.put(prototypeFieldSchemaId, prototypeFieldCachingService);
    }

    public CachingService instantiateCachingService(Service originService) {
        final Map<URI, Model> rawModelMap = new HashMap<URI, Model>();
        final ObservableMap<URI, Model> observableModelCache = new DelegatingObservableMap<URI, Model>(rawModelMap);
        return new CachingService(this, originService, observableModelCache);
    }

    public ObservableMap<URI, Service> getServiceMap() {
        return _ServiceMap;
    }

}
